/*
 * To change this license header, choose License Headers in P    @Override
    public int getRowCount() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getColumnCount() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
roject Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subtitlesync.Frames;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author nithinalways
 */
public class mappingFrame extends javax.swing.JFrame {
    
    private Home ob;
    private ArrayList<String> videoList = new ArrayList();
    private ArrayList<String> srtList = new ArrayList();

    /**
     * Creates new form mappingFrame
     */
    mappingFrame(Home ob) {
        initComponents();
        initilizeVariable(ob);
        buildTable();
    }
    
    class MyTableModel extends AbstractTableModel {
        
        String[] columnNames = {"Video File",
            "Select srt file"};
        Object[][] data = new Object[videoList.size()][2];
        
        public MyTableModel() {
            for (int i = 0; i < videoList.size(); i++) {
                data[i][0] = videoList.get(i);
                data[i][1] = srtList.get(i);
            }
        }
        
        public int getColumnCount() {
            return columnNames.length;
        }
        
        public int getRowCount() {
            return data.length;
        }
        
        public String getColumnName(int col) {
            return columnNames[col];
        }
        
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }
        
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
        
        public boolean isCellEditable(int row, int col) {
            return true;
        }

        //Coloumn value change according to combobox
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
    }
    
    private void buildTable() {
        
        table.setModel(new MyTableModel());
        table.setRowHeight(25);
        
        TableColumn srtColumn = table.getColumnModel().getColumn(1);
        JComboBox comboBox = new JComboBox(srtList.toArray());
        srtColumn.setCellEditor(new DefaultCellEditor(comboBox));
        
        DefaultTableCellRenderer renderer
                = new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        srtColumn.setCellRenderer(renderer);
        
        TableColumn column = null;
        for (int i = 0; i < 2; i++) {
            column = table.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(100);
            } else {
                column.setPreferredWidth(50);
            }
        }
    }
    
    private void initilizeVariable(Home ob) {
        this.ob = ob;
        this.videoList = ob.videoList;
        this.srtList = ob.srtList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollpane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        scrollpane.setViewportView(table);

        jButton1.setText("Map");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("* click on the srt to get dropdown");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollpane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        HashMap<String, String> similarList = ob.similarList;
        List<String> vals = new ArrayList();
        for (int i = 0; i < videoList.size(); i++) {
            vals.add(table.getModel().getValueAt(i, 1).toString());
        }
        Set<String> set = new HashSet<>(vals);
        if (set.size() < vals.size()) {
            ob.showError("You cannot have two video files have the same SRT file");
            return;
        }
        similarList.clear();
        for (int i = 0; i < videoList.size(); i++) {
            similarList.put(table.getModel().getValueAt(i, 1).toString(), videoList.get(i));
        }
        
        int ret = ob.showConfirmDialog("Are you sure ?");
        if (ret == JOptionPane.YES_OPTION) {
            ob.doSync();
            ob.showInfoMessage("Video and srt files have been synced successfully");
            ob.completeProcess();
            this.setVisible(false);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
