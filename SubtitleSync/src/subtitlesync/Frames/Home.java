/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subtitlesync.Frames;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author test
 */
public class Home extends javax.swing.JFrame {

    String absolutepath;
    private String extension;
    private final String[] commonVideoExtensions = {"webm", "mkv", "flv", "vob", "ogg", "ogv", "avi", "mov", "wmv", "asf", "mp4", "m4v", "mpg", "mpeg"};
    ArrayList<String> videoList = new ArrayList();
    ArrayList<String> srtList = new ArrayList();
    HashMap<String, File> srtFilesList = new HashMap();
    HashMap<String, String> similarList = new HashMap();
    private boolean isSyncReady = false;

    /**
     * Creates new form Home
     */
    public Home() {

        initComponents();
        visibilityController();
    }

    private void visibilityController() {
        editorPanel.setVisible(false);
        extensionContainer.setVisible(false);
        afterMatchingButtonsContainer.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        dg = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        extensionContainer = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        extensionField = new javax.swing.JTextField();
        searchExtensionButton = new javax.swing.JButton();
        afterMatchingButtonsContainer = new javax.swing.JPanel();
        syncButton = new javax.swing.JButton();
        mapManualButton = new javax.swing.JButton();
        editorPanel = new javax.swing.JPanel();
        matchListScrollPane = new javax.swing.JScrollPane();
        listTextArea = new javax.swing.JTextArea();

        javax.swing.GroupLayout dgLayout = new javax.swing.GroupLayout(dg.getContentPane());
        dg.getContentPane().setLayout(dgLayout);
        dgLayout.setHorizontalGroup(
            dgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        dgLayout.setVerticalGroup(
            dgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SubtitleSync");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Video Subtitle Name Sync Application");

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Select the folder containing both video and srt files : ");

        jLabel3.setText("Extension : ");

        extensionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extensionFieldActionPerformed(evt);
            }
        });

        searchExtensionButton.setText("Search");
        searchExtensionButton.setFocusable(false);
        searchExtensionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchExtensionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchExtensionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchExtensionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout extensionContainerLayout = new javax.swing.GroupLayout(extensionContainer);
        extensionContainer.setLayout(extensionContainerLayout);
        extensionContainerLayout.setHorizontalGroup(
            extensionContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extensionContainerLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extensionField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchExtensionButton)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        extensionContainerLayout.setVerticalGroup(
            extensionContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extensionContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(extensionContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchExtensionButton)
                    .addGroup(extensionContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(extensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        syncButton.setText("Sync");
        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        mapManualButton.setText("Map files manually");
        mapManualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapManualButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout afterMatchingButtonsContainerLayout = new javax.swing.GroupLayout(afterMatchingButtonsContainer);
        afterMatchingButtonsContainer.setLayout(afterMatchingButtonsContainerLayout);
        afterMatchingButtonsContainerLayout.setHorizontalGroup(
            afterMatchingButtonsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afterMatchingButtonsContainerLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(syncButton)
                .addGap(18, 18, 18)
                .addComponent(mapManualButton)
                .addContainerGap())
        );
        afterMatchingButtonsContainerLayout.setVerticalGroup(
            afterMatchingButtonsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afterMatchingButtonsContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(afterMatchingButtonsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(syncButton)
                    .addComponent(mapManualButton))
                .addContainerGap())
        );

        listTextArea.setEditable(false);
        listTextArea.setColumns(20);
        listTextArea.setRows(5);
        matchListScrollPane.setViewportView(listTextArea);

        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);
        editorPanel.setLayout(editorPanelLayout);
        editorPanelLayout.setHorizontalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(matchListScrollPane)
        );
        editorPanelLayout.setVerticalGroup(
            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matchListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton))
                            .addComponent(extensionContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(afterMatchingButtonsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 93, Short.MAX_VALUE))
                    .addComponent(editorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(extensionContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(afterMatchingButtonsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void startRenaming() {
        ArrayList<String> commonVideoExtensionsList = new ArrayList<>(Arrays.asList(commonVideoExtensions));
        File directory = new File(absolutepath);
        File[] filesInDir = directory.listFiles();
        if (filesInDir.length == 0) {
            showError("No files in the selected folder");
            return;
        }
        for (File file : filesInDir) {
            if (commonVideoExtensionsList.contains(FilenameUtils.getExtension(file.getName()).toLowerCase())) {
                videoList.add(FilenameUtils.getBaseName(file.getName()));
            } else if ("srt".equals(FilenameUtils.getExtension(file.getName()).toLowerCase())) {
                srtList.add(FilenameUtils.getBaseName(file.getName()));
                srtFilesList.put(FilenameUtils.getBaseName(file.getName()), file);
            }
        }
        if (videoList.isEmpty() && srtList.isEmpty()) {
            showError("There is no supported video files or srt file in the selected folder");
            resetLists();
            isSyncReady = false;
        } else if (videoList.isEmpty()) {
            showError("There is no supported video files in the selected folder");
            resetLists();
            isSyncReady = false;
        } else if (srtList.isEmpty()) {
            showError("There is no supported srt files in the selected folder");
            resetLists();
            isSyncReady = false;
        } else {
            isSyncReady = true;
            fileNameMatching();
        }
    }

    private void fileNameMatching() {
        ArrayList<String> videoListTemp = new ArrayList<>(videoList);
        ArrayList<String> srtListTemp = new ArrayList<>(srtList);
        for (String v : videoListTemp) {
            String vdo = v;
            String srt = "";
            double val = 0;
            for (String s : srtListTemp) {
                if (StringUtils.getJaroWinklerDistance(v, s) > val) {
                    val = StringUtils.getJaroWinklerDistance(v, s);
                    srt = s;
                }
            }
            similarList.put(srt, vdo);
            srtListTemp.remove(srt);
        }
        doRename();
    }

    private void doRename() {
        StringBuilder content = new StringBuilder();
        Set set = similarList.entrySet();
        Iterator i = set.iterator();
        while (i.hasNext()) {
            Map.Entry me = (Map.Entry) i.next();
            content.append(me.getValue() + " ----> " + me.getKey());
            content.append("\n");
        }
        listTextArea.setText(content.toString());
        editorPanel.setVisible(true);
        afterMatchingButtonsContainer.setVisible(true);
    }

    protected void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    protected void showInfoMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error",
                JOptionPane.INFORMATION_MESSAGE);
    }

    protected int showConfirmDialog(String message) {
        return JOptionPane.showConfirmDialog(this, message, "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    }

    private void resetLists() {
        videoList.clear();
        srtList.clear();
        srtFilesList.clear();
        similarList.clear();
    }

    protected void doSync() {
        System.out.println(similarList);
        Set set = srtFilesList.entrySet();
        Iterator i = set.iterator();
        while (i.hasNext()) {
            Map.Entry me = (Map.Entry) i.next();
            File oldFile = srtFilesList.get(me.getKey());
            oldFile.renameTo(new File(absolutepath + "/" + similarList.get(me.getKey()) + ".srt"));
        }
    }

    public void completeProcess() {
        resetLists();
        visibilityController();
    }

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (evt.getSource() == browseButton) {
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                resetLists();
                listTextArea.setText("");
                absolutepath = fc.getSelectedFile().toString();
                startRenaming();
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        if (isSyncReady) {
            int ret = showConfirmDialog("Are you sure ?");
            if (ret == JOptionPane.YES_OPTION) {
                doSync();
                showInfoMessage("Video and srt files have been synced successfully");
                completeProcess();
            }
        } else {
            showError("No files to sync");
        }
    }//GEN-LAST:event_syncButtonActionPerformed

    private void mapManualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapManualButtonActionPerformed
        if (isSyncReady) {
            new mappingFrame(this).setVisible(true);
        } else {
            showError("No files to map");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_mapManualButtonActionPerformed

    private void searchExtensionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchExtensionButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchExtensionButtonActionPerformed

    private void extensionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extensionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extensionFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel afterMatchingButtonsContainer;
    private javax.swing.JButton browseButton;
    private javax.swing.JDialog dg;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JPanel extensionContainer;
    private javax.swing.JTextField extensionField;
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextArea listTextArea;
    private javax.swing.JButton mapManualButton;
    private javax.swing.JScrollPane matchListScrollPane;
    private javax.swing.JButton searchExtensionButton;
    private javax.swing.JButton syncButton;
    // End of variables declaration//GEN-END:variables
}
